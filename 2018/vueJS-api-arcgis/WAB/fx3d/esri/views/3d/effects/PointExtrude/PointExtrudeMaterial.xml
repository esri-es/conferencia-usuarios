<?xml version="1.0" encoding="UTF-8"?><!-- Copyright @ 2018 Esri. All rights reserved under the copyright laws of the United States and applicable international laws, treaties, and conventions. --><snippets><snippet name="pointExtrudeFS"><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
uniform float ml;uniform vec3 ms;uniform vec4 so;uniform vec4 ee;uniform vec4 os;uniform vec3 camPos;varying vec4 dh;varying vec3 hd;varying vec3 gg;const vec3 a=vec3(1.0,1.0,1.0);const vec3 b=vec3(1.0,1.0,1.0);const vec3 c=vec3(0.2,0.2,0.2);void main(){vec3 d=normalize(gg-camPos);vec3 e=normalize(hd);vec3 f=normalize(reflect(d,e));float g=max(dot(f,ms),.001);vec3 h=c*os.rgb*os.w*pow(g,18.0);vec3 i=a*ee.rgb*ee.w*clamp(dot(e,ms),.0,1.0);vec3 j=b*so.rgb*so.w;vec3 k=vec3(j+i+h);gl_FragColor.xyz=dh.xyz*k;float l=ml*0.01;gl_FragColor.w=l;}]]></snippet><snippet name="pointExtrudeVS"><![CDATA[attribute vec3 $position;attribute vec3 $auxpos1;attribute vec3 $normal;attribute vec3 $auxpos2;uniform mat4 le;uniform mat4 viewMat;uniform sampler2D se;uniform sampler2D me;uniform float ss;uniform vec3 mm;uniform vec3 origin;uniform vec3 camPos;uniform sampler2D ip;uniform vec3 eo;uniform float is;uniform float si;uniform vec2 ls;uniform vec2 mo;uniform bool ie;uniform float sp;uniform vec4 ps;varying vec4 dh;varying vec3 hd;varying vec3 gg; $linearInterpolator  $lonlat2position  $translationMat  $localTrans  $quintEaseOut const float a=1.0;const float b=0.0;vec4 matchPixelCenter(vec4 c,vec2 d){vec2 e=vec2(.500123)+.5*c.xy/c.w;vec2 f=floor(e*d);vec2 g=vec2(1.0)/d;vec2 h=(((vec2(.5)+f)*g)*2.0-vec2(1.0))*c.w;return vec4(h.x,h.y,c.z,c.w);}void main(void){float i=fract($auxpos2.x/ls.x);float j=floor($auxpos2.x/ls.y)/ls.y;float k=(texture2D(se,vec2(i,j))).r;float l=(texture2D(me,vec2(i,j))).r;float m=mod(is,ss);float n=getQuintEaseInOutValue(m,k,l,ss);if(ie){n=l;}float o=getLinearValue(mo,n);float p=$auxpos2.y*si*2.0*PI;vec3 q=vec3(mm.x*cos(p),mm.x*sin(p),0.0);bool r=false;if($auxpos2.z==a){r=true;}else if($auxpos2.z==b){r=false;}vec3 s=mm.x*$position+$auxpos1;vec3 t=(viewMat*vec4($auxpos1,1.0)).xyz;vec3 u;mat4 v=mat4(1.0);
#ifdef GLOBAL
u=normalize(s+origin);
#else
u=vec3(0.0,0.0,1.0);
#endif
vec3 w=(viewMat*vec4(s,1.0)).xyz;hd=normalize(w-t);if(r){dh=texture2D(ip,vec2(o,0.5));s+=(u*getScope(mm.yz,o));}else{dh=vec4(eo,1.0);}vec3 x=vec3(1.0,0.0,0.0);float y=1.0;float z=1.0;float A=abs(dot(u,normalize(camPos-s)));float B=0.00001;w=(viewMat*vec4(s,1.0)).xyz;if(A>.01){float C=sqrt(1.0-A*A)/A;float D=(1.0-C/ps[2]);if(z>0.0){w*=D;}else{w/=D;}}w+=x;vec4 E=le*vec4(w,1.0);E.z-=z*B*E.w;gl_Position=matchPixelCenter(E,ps.zw);hd=normalize(u+hd*0.5);gg=w;}]]></snippet></snippets>